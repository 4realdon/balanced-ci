echo Build is: ${PP_BUILD}

PYENV_HOME=$WORKSPACE/.pyenv/

# Consistent environments are more consistent
source /etc/profile

REBUILD_VIRTUALENV=0
REQ_FILES="requirements.txt test-requirements.txt requirements-test.txt"

for req in $REQ_FILES setup.py; do    # Don't execute setup.py, but track it
    LAST_REQUIREMENTS="$WORKSPACE/../$req"
    REQS="$WORKSPACE/<%= @new_resource.project_prefix %>$req"
    if [ -e $REQS ]; then
        if [ ! -e $LAST_REQUIREMENTS ] || ! diff -aq $LAST_REQUIREMENTS $REQS; then
            REBUILD_VIRTUALENV=1
        fi
        cp $REQS $LAST_REQUIREMENTS
    fi
done

if [ -d $PYENV_HOME ] && [ $REBUILD_VIRTUALENV -ne 0 ]; then
    rm -rf $PYENV_HOME
fi

virtualenv $PYENV_HOME
. $PYENV_HOME/bin/activate

for req in $REQ_FILES; do
    if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>$req ]; then
        pip install -r $WORKSPACE/<%= @new_resource.project_prefix %>$req
    fi
done

if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>setup.py ]; then
    if [ -z "<%= @new_resource.project_prefix %>" ]
    then
        python $WORKSPACE/setup.py develop
    else
        pushd $WORKSPACE/<%= @new_resource.project_prefix %> && python setup.py develop && popd;
    fi
fi

pip install --quiet nosexcover
pip install coverage==3.5.3

find $WORKSPACE -path $PYENV_HOME -prune -o -name "*.pyc" -print0 | xargs -0 rm

# Rebuild test db if necessary/possible
REBUILD_SCRIPTS="scripts/recreate-test"
for script in $REBUILD_SCRIPTS; do
    if [ -e $WORKSPACE/<%= @new_resource.project_prefix %>$script ]; then
        $WORKSPACE/<%= @new_resource.project_prefix %>$script
        break
    fi
done

<%= @new_resource.test_command %>

